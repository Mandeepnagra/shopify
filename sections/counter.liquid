<div id="counter"
  class="counter bg-primary">
  <div
    class="container px-2 xl:px-0">
    <div class="grid grid-cols-1 md:grid-cols-3 md:gap-6">
      {% for block in section.blocks %}
        {% case block.type %}
          {% when 'counter_block' %}
            <div class="col text-white text-center pb-6 md:pb-14">
              <div class="Evolventa-Bold counter_number text-4xl pt-6 lg:pt-[77px] lg:text-[7.625rem] lg:leading-[65px]" data-target="{{ block.settings.counter_number }}">0</div>
              <h3 class="mb-[9px] mt-2 lg:mt-[37px]">{{ block.settings.counter_heading }}</h3>
              <p>{{ block.settings.counter_description }}</p>
            </div>
         {% endcase %}
      {% endfor %}
    </div>
  </div>
</div>

<script>
  if(typeof isInViewport !== "function"){
    function isInViewport(el) {
        const rect = el.getBoundingClientRect();
        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)

        );
    }
  }

  var inView = false;
  var i = 0; //to trigger counter just once
  
  function counterBlockScript(){
    const counterBlock = document.querySelector('#counter');
    if(isInViewport(counterBlock)){
      inView = true;
    }
    if(inView == true && i == 0){  //to trigger counter just once, when in view
      var intervalTime;
      let duration = 2000;

      let animateNumberInCounter = (number,item, ratio, intervalTime) =>{
        let startingNum = 0;
        let interval = setInterval(()=>{
          if(startingNum >= number){
            clearInterval(interval);
          } else {
            startingNum += ratio;
            item.innerHTML = Math.round(startingNum);
          } 
        }, intervalTime);
      };

      ++i; //to trigger counter just once

      const counters = document.querySelectorAll('.counter_number');
      var ratio = 1;
      var highestTarget = 0;

      //Getting the highest target value from data-attribute
      for ( var j =0; j < counters.length; j++){
        var value = counters[j].getAttribute("data-target");
        if ( highestTarget < parseInt(value) ){ highestTarget = value;}
      }

      //animateNumberInCounter for each counter element
      [].forEach.call(counters, function(el) {
        target = parseInt(el.getAttribute('data-target'));
        ratio = (target/highestTarget);
        intervalTime = (duration/highestTarget);
        animateNumberInCounter(target, el, ratio, intervalTime);
      });

   }
  }
  document.addEventListener('scroll', counterBlockScript);


</script>

{% schema %}
  {
    "name": "counter",
    "tag": "section",
    "class": "section",
    "max_blocks": 3,
    "blocks": [
       {
         "name": "Counter Block",
         "type": "counter_block",
         "settings": [
           {
            "type": "number",
            "id": "counter_number",
            "label": "Number",
            "default": 20
           },{
            "type": "text",
            "id": "counter_heading",
            "label": "Heading",
            "default": "Title"
          },{
            "type": "textarea",
            "id": "counter_description",
            "label": "Description",
            "default": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer facilisis vitae enim at scelerisque. Pellentesque gravida pretium interdum."
          }
         ]
       }
    ],    
    "presets": [
        {
          "name": "Counter"
        }
      ]
  }
{% endschema %}